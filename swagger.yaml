openapi: 3.0.0
info:
  description: This API is used to collect implicit feedback form the OpenReq UI.
  version: "1.0.0-oas3"
  title: Logging API
  contact:
    email: biryuk@informatik.uni-hamburg.de
paths:
  /frontend/script:
    get:
      summary: Get the JavaScript library for front end logging .
      description: >-
        Get the logging JavaScript library that logs the user interaction in the
        browser.
      operationId: get_logger_script
      responses:
        '200':
          description: The JavaScript file.
        '404':
          description: The JavaScript file could not be found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The error description message.
  /frontend/log:
    get:
      summary: Get the front end log.
      description: Get all the log entries of the user interactions (implicit feedback).
      operationId: fe_log_get
      security:
        - Bearer: []
      responses:
        '200':
          description: The log.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FrontendLogResponse'
        '500':
          description: The log database could not be accessed or uenxpected error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
    post:
      summary: Log interaction.
      description: >-
        Save a browser event, adding further preoperties like the remote
        IP-address.
      responses:
        '200':
          description: Log entry successfully stored.
        '400':
          description: Log is missing in the request or Missing property "type" in the log.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '500':
          description: The log could not be saved to database.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrontEndLogEntry'
        description: >-
          The log must at least contain the "type" (browser event type)
          attribute.
        required: true
  /frontend/change:
    get:
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: The username of the user who's changes are to be fetched.
      summary: Get the number of changes to requirement elements.
      description: >-
        Get the number of changes (title, description, status) per requirement
        entry.
      operationId: fe_change
      security:
        - Bearer: []
      responses:
        '200':
          description: The changes.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FrontendChangeResponse'
        '500':
          description: The log database could not be accessed or uenxpected error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
  /frontend/change/{projectId}:
    get:
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: The username of the user who's changes are to be fetched.
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: >-
            The project ID.
      summary: >-
        Get the number of changes to requirement elements for a project.
      description: >-
        Get the number of changes (title, description, status) per requirement for a given project.
      operationId: fe_change_project
      security:
        - Bearer : [] 
      responses:
        '200':
          description: The changes.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FrontendChangeResponseProject'
        '500':
          description: The log database could not be accessed or uenxpected error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMessage'
  /backend/log:
    get:
      summary: Get the filenames of the backend logs.
      description: >-
        Get all the file names of the backend server logs that reside in the
        mapped directory.
      operationId: be_logs_get
      security:
        - Bearer: []
      responses:
        '200':
          description: Log text.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                example: This is a log.
        '401':
          description: >-
            No Authorization was was provided in the header or the authorization
            token is invalid.
          headers:
            WWW-Authenticate:
              description: Authentication hint.
              schema:
                type: string
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '500':
          description: The log could not be found or could not reach the database.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
  '/backend/log/{filename}':
    get:
      summary: Gets a log by filename.
      parameters:
        - in: path
          name: filename
          required: true
          description: The log file name.
          schema:
            type: string
      description: Get all the logged backend interactions.
      operationId: be_log_get
      security:
        - Bearer: []
      responses:
        '200':
          description: Log JSON.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/BackendLogResponse'
        '401':
          description: >-
            No Authorization was was provided in the header or the authorization
            token is invalid.
          headers:
            WWW-Authenticate:
              description: Authentication hint.
              schema:
                type: string
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '500':
          description: The log could not be found or could not reach the database.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
servers:
  - url: 'https://api.openreq.eu/ri-logging'
components:
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    FrontEndLogEntry:
      type: object
      properties:
        type:
          type: string
          example: click
    ResponseMessage:
      type: object
      properties:
        message:
          type: string
          example: The response message.
    FrontendLogResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            type: object
            properties:
              ip:
                type: string
                example: 127.0.0.1
              event_type:
                type: string
                example: click
              header:
                type: object
                example: {}
              body:
                type: object
                example: {}
        message:
          type: string
          example: The response message.
    FrontendChangeResponse:
      type: object
      properties:
        changes:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: string
                example: project123
              changeCount:
                type: object
                properties:
                  descritpion:
                    type: string
                    example: This is a new description.
                  status:
                    type: string
                    example: This is a new status.
                  title:
                    type: string
                    example: This is a new title.
    FrontendChangeResponseProject:
      type: object
      properties:
        changes:
          type: array
          items:
            type: object
            properties:
              requrementId:
                type: string
                example: '112'
              changeCount:
                type: object
                properties:
                  descritpion:
                    type: string
                    example: This is a new description.
                  status:
                    type: string
                    example: This is a new status.
                  title:
                    type: string
                    example: This is a new title.
    BackendLogResponse:
      type: object
      properties:
        logs:
          type: string
        message:
          type: string
          example: The response message.