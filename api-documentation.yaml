swagger: "2.0"
info:
  description: This API is used to collect implicit feedback form the OpenReq UI.
  version: "1.0.0"
  title: Logging API
  contact:
    email: biryuk@informatik.uni-hamburg.de
host: api.openreq.eu
basePath: /ri-logging
schemes:
 - https
paths:
  /frontend/script:
    get:
      produces:
        - application/json
      summary: Get the JavaScript library for front end logging .
      description: Get the logging JavaScript library that logs the user interaction in the browser.
      operationId: get_logger_script
      responses:
        200:
          description: The JavaScript file.
        404:
          description: The JavaScript file could not be found.
          schema:
            type: object
            properties:
              message:
                type: string
                description: The error description message.
  /frontend/log:
    get:
      summary: Get the front end log.
      description: Get all the log entries of the user interactions (implicit feedback).
      operationId: fe_log_get
      security:
        - Bearer : [] 
      responses:
        200:
          description: The log.
          schema:
            $ref: "#/definitions/FrontendLogResponse"
        500:
          description: The log database could not be accessed or uenxpected error.
          schema:
            $ref: "#/definitions/ResponseMessage"
    post:
      summary: Log interaction.
      description: Save a browser event, adding further preoperties like the remote IP-address.
      consumes:
        - application/json
      parameters:
        - in: body
          name: type
          description: The log must at least contain the "type" (browser event type) attribute.
          required: true
          schema:
            $ref: "#/definitions/FrontEndLogEntry"
      responses:
        200:
          description: Log entry successfully stored.
        400:
          description: Log is missing in the request or Missing property "type" in the log.
          schema:
            $ref: "#/definitions/ResponseMessage"          
        500:
          description: The log could not be saved to database.
          schema:
            $ref: "#/definitions/ResponseMessage"
  /backend/log:
    get:
      summary: Get the filenames of the backend logs.
      description: Get all the file names of the backend server logs that reside in the mapped directory.
      operationId: be_logs_get
      produces:
        - application/json; charset=utf-8
      security:
        - Bearer : [] 
      responses:
        200:
          description: Log text.
          schema:
            type: object
            example: This is a log.
        401:
          description: No Authorization was was provided in the header or the authorization token is invalid.
          headers:
            WWW-Authenticate:
              type: string
              description: Authentication hint.
          schema:
            $ref: "#/definitions/ResponseMessage"
        500:
          description: The log could not be found or could not reach the database.
          schema:
            $ref: "#/definitions/ResponseMessage"
  /backend/log/{filename}:
    get:
      summary: Gets a log by filename.
      parameters:
        - in: path
          name: filename
          type: string
          required: true
          description: The log file name.
      description: Get all the logged backend interactions.
      operationId: be_log_get
      produces:
        - application/json; charset=utf-8
      security:
        - Bearer : [] 
      responses:
        200:
          description: Log JSON.
          schema:
            $ref: "#/definitions/BackendLogResponse"
        401:
          description: No Authorization was was provided in the header or the authorization token is invalid.
          headers:
            WWW-Authenticate:
              type: string
              description: Authentication hint.
          schema:
            $ref: '#/definitions/ResponseMessage'
        500:
          description: The log could not be found or could not reach the database.
          schema:
            $ref: '#/definitions/ResponseMessage'
definitions:
  FrontEndLogEntry:
    type: object
    properties:
      type: 
        type:  string
        example: click
  ResponseMessage:
    type: object
    properties:
      message:
        type:  string
        example: The response message.
  FrontendLogResponse:
    type: object
    properties:
      logs:
        type: array
        items:
          type: object
          properties:
            ip:
              type:  string
              example: 127.0.0.1
            event_type: 
              type:  string
              example: click
            header:
              type:  object
              example: {}
            body:
              type: object
              example: {}
      message:
        type:  string
        example: The response message.
  BackendLogResponse:
    type: object
    properties:
      logs:
        type: string
      message:
        type:  string
        example: The response message.
securityDefinitions:
  Bearer:
    type: apiKey
    in: header
    name: Authorization